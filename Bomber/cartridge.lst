------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; --------------------------------------------------------------------
      4  10000 ????						; Include required files with VCS register memory mapping and macros
      5  10000 ????						; --------------------------------------------------------------------
------- FILE ../vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE ../macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						; --------------------------------------------------------------------
     10  0000 ????						; Declare variables starting from memory address $80
     11  0000 ????						; --------------------------------------------------------------------
     12 U008c ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; Player0 x-position
     16 U0081		       00	   JetYPos    byte.b		; Player0 y-position
     17 U0082		       00	   BomberXPos byte.b		; Bomber x-position
     18 U0083		       00	   BomberYPos byte.b		; Bomber y-position
     19 U0084		       00 00	   JetSpritePtr word.w		; Pointer to player0 sprite lookup table
     20 U0086		       00 00	   JetColorPtr word.w		; Pointer to player0 color lookup table
     21 U0088		       00 00	   BomberSpritePtr word.w		; Pointer to player1 sprite lookup table
     22 U008a		       00 00	   BomberColorPtr word.w		; Pointer to player1 color lookup table
     23 U008c
     24 U008c							; --------------------------------------------------------------------
     25 U008c							; Define constants
     26 U008c							; --------------------------------------------------------------------
     27 U008c		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     28 U008c		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     29 U008c
     30 U008c							; --------------------------------------------------------------------
     31 U008c							; Start our ROM code at memory address $F000
     32 U008c							; --------------------------------------------------------------------
     33  10000 ????				       seg	Code
     34  f000					      org	$F000
     35  f000
     36  f000				   Reset
      0  f000					      CLEAN_START		; Call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     38  f00b
     39  f00b
     40  f00b							; --------------------------------------------------------------------
     41  f00b							; Initialize RAM variables and TIA registers
     42  f00b							; --------------------------------------------------------------------
     43  f00b		       a9 44		      lda	#68
     44  f00d		       85 80		      sta	JetXPos	; JetXPos = 68
     45  f00f		       a9 0a		      lda	#10
     46  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     47  f013		       a9 3e		      lda	#62
     48  f015		       85 82		      sta	BomberXPos	; BomberXPos = 62
     49  f017		       a9 53		      lda	#83
     50  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     51  f01b
     52  f01b							; --------------------------------------------------------------------
     53  f01b							; Initialize pointers to the correct lookup table addresses
     54  f01b							; --------------------------------------------------------------------
     55  f01b		       a9 73		      lda	#<JetSprite
     56  f01d		       85 84		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     57  f01f		       a9 f1		      lda	#>JetSprite
     58  f021		       85 85		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     59  f023
     60  f023		       a9 8e		      lda	#<JetColor
     61  f025		       85 86		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     62  f027		       a9 f1		      lda	#>JetColor
     63  f029		       85 87		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     64  f02b
     65  f02b		       a9 85		      lda	#<BomberSprite
     66  f02d		       85 88		      sta	BomberSpritePtr	; lo-byte pointer for bomber sprite lookup table
     67  f02f		       a9 f1		      lda	#>BomberSprite
     68  f031		       85 89		      sta	BomberSpritePtr+1	; hi-byte pointer for bomber sprite lookup table
     69  f033
     70  f033		       a9 a0		      lda	#<BomberColor
     71  f035		       85 8a		      sta	BomberColorPtr	; lo-byte pointer for bomber color lookup table
     72  f037		       a9 f1		      lda	#>BomberColor
     73  f039		       85 8b		      sta	BomberColorPtr+1	; hi-byte pointer for bomber color lookup table
     74  f03b
     75  f03b							; --------------------------------------------------------------------
     76  f03b							; Start the main display loop and frame rendering
     77  f03b							; --------------------------------------------------------------------
     78  f03b				   StartFrame
     79  f03b
     80  f03b							; --------------------------------------------------------------------
     81  f03b							; Calculations and tasks performed in the pre-VBLANK
     82  f03b							; --------------------------------------------------------------------
     83  f03b		       a5 80		      lda	JetXPos
     84  f03d		       a0 00		      ldy	#0
     85  f03f		       20 5f f1 	      jsr	SetObjectXPos	; Set Player0 horizontal position
     86  f042
     87  f042		       a5 82		      lda	BomberXPos
     88  f044		       a0 01		      ldy	#1
     89  f046		       20 5f f1 	      jsr	SetObjectXPos	; Set Player1 horizontal position
     90  f049
     91  f049		       85 02		      sta	WSYNC
     92  f04b		       85 2a		      sta	HMOVE	; Apply the horizontal offsets that was set previously
     93  f04d
     94  f04d							; --------------------------------------------------------------------
     95  f04d							; Display VSYNC and VBLANK
     96  f04d							; --------------------------------------------------------------------
     97  f04d		       a9 02		      lda	#2
     98  f04f		       85 01		      sta	VBLANK	; Turn VBLANK on
     99  f051		       85 00		      sta	VSYNC	; Turn VSYNC on
    100  f053					      repeat	3
    101  f053		       85 02		      sta	WSYNC	; Display 3 recommended lines of VSYNC
    100  f053					      repend
    101  f055		       85 02		      sta	WSYNC	; Display 3 recommended lines of VSYNC
    100  f055					      repend
    101  f057		       85 02		      sta	WSYNC	; Display 3 recommended lines of VSYNC
    102  f059					      repend
    103  f059		       a9 00		      lda	#0
    104  f05b		       85 00		      sta	VSYNC	; Turn VSYNC off
    105  f05d					      repeat	37
    106  f05d		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f05d					      repend
    106  f05f		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f05f					      repend
    106  f061		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f061					      repend
    106  f063		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f063					      repend
    106  f065		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f065					      repend
    106  f067		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f067					      repend
    106  f069		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f069					      repend
    106  f06b		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f06b					      repend
    106  f06d		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f06d					      repend
    106  f06f		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f06f					      repend
    106  f071		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f071					      repend
    106  f073		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f073					      repend
    106  f075		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f075					      repend
    106  f077		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f077					      repend
    106  f079		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f079					      repend
    106  f07b		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f07b					      repend
    106  f07d		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f07d					      repend
    106  f07f		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f07f					      repend
    106  f081		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f081					      repend
    106  f083		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f083					      repend
    106  f085		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f085					      repend
    106  f087		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f087					      repend
    106  f089		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f089					      repend
    106  f08b		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f08b					      repend
    106  f08d		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f08d					      repend
    106  f08f		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f08f					      repend
    106  f091		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f091					      repend
    106  f093		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f093					      repend
    106  f095		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f095					      repend
    106  f097		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f097					      repend
    106  f099		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f099					      repend
    106  f09b		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f09b					      repend
    106  f09d		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f09d					      repend
    106  f09f		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f09f					      repend
    106  f0a1		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f0a1					      repend
    106  f0a3		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    105  f0a3					      repend
    106  f0a5		       85 02		      sta	WSYNC	; Display the 37 recommended lines of VBLANK
    107  f0a7					      repend
    108  f0a7		       85 01		      sta	VBLANK
    109  f0a9
    110  f0a9							; --------------------------------------------------------------------
    111  f0a9							; Dispaly the 96 visible scanlines of our main game (2-line kernel)
    112  f0a9							; --------------------------------------------------------------------
    113  f0a9				   GameVisibleLine
    114  f0a9		       a9 84		      lda	#$84	; Set background color to blue
    115  f0ab		       85 09		      sta	COLUBK
    116  f0ad		       a9 c2		      lda	#$C2	; Set playfield color to green
    117  f0af		       85 08		      sta	COLUPF
    118  f0b1
    119  f0b1		       a9 01		      lda	#%00000001
    120  f0b3		       85 0a		      sta	CTRLPF	; Set playfield reflection
    121  f0b5		       a9 f0		      lda	#$F0
    122  f0b7		       85 0d		      sta	PF0	; Setting PF0 (playfield) bit pattern
    123  f0b9		       a9 fc		      lda	#$FC
    124  f0bb		       85 0e		      sta	PF1	; Setting PF1 (playfield) bit pattern
    125  f0bd		       a9 00		      lda	#0
    126  f0bf		       85 0f		      sta	PF2	; Setting PF2 (playfield) bit pattern
    127  f0c1
    128  f0c1		       a2 60		      ldx	#96	; X counts the number of remaining scanline
    129  f0c3				   .GameLineLoop
    130  f0c3				   .AreWeInsideJetSprite
    131  f0c3		       8a		      txa		; Transfer X to A
    132  f0c4		       38		      sec		; Make sure carry flag is set before substraction
    133  f0c5		       e5 81		      sbc	JetYPos	; Substract sprite Y-coordinate
    134  f0c7		       c5 09		      cmp	JET_HEIGHT	; Compare with height
    135  f0c9		       90 02		      bcc	.DrawSpriteP0	; If result < SpriteHeight. call the draw routine
    136  f0cb		       a9 00		      lda	#0	; else, set lookup index to zero
    137  f0cd				   .DrawSpriteP0
    138  f0cd		       a8		      tay		; Transfer A to Y
    139  f0ce		       b1 84		      lda	(JetSpritePtr),Y	; Load Player0 bitmap data from lookup table
    140  f0d0		       85 02		      sta	WSYNC	; Wait for scanline
    141  f0d2		       85 1b		      sta	GRP0	; Set graphics for Player0
    142  f0d4		       b1 86		      lda	(JetColorPtr),Y	; Load Player0 color from lookup table
    143  f0d6		       85 06		      sta	COLUP0	; Set color of Player0
    144  f0d8
    145  f0d8				   .AreWeInsideBomberSprite
    146  f0d8		       8a		      txa		; Transfer X to A
    147  f0d9		       38		      sec		; Make sure carry flag is set before substraction
    148  f0da		       e5 83		      sbc	BomberYPos	; Substract sprite Y-coordinate
    149  f0dc		       c5 09		      cmp	BOMBER_HEIGHT	; Compare with height
    150  f0de		       90 02		      bcc	.DrawSpriteP1	; If result < SpriteHeight. call the draw routine
    151  f0e0		       a9 00		      lda	#0	; else, set lookup index to zero
    152  f0e2				   .DrawSpriteP1
    153  f0e2		       a8		      tay		; Transfer A to Y
    154  f0e3		       a9 05		      lda	#%00000101
    155  f0e5		       85 05		      sta	NUSIZ1	; Stretch Player1 sprite
    156  f0e7		       b1 88		      lda	(BomberSpritePtr),Y	; Load Player1 bitmap data from lookup table
    157  f0e9		       85 02		      sta	WSYNC	; Wait for scanline
    158  f0eb		       85 1c		      sta	GRP1	; Set graphics for Player1
    159  f0ed		       b1 8a		      lda	(BomberColorPtr),Y	; Load Player1 color from lookup table
    160  f0ef		       85 07		      sta	COLUP1	; Set color of Player1
    161  f0f1
    162  f0f1		       ca		      dex		; X--
    163  f0f2		       d0 cf		      bne	.GameLineLoop	; Repeat next main game scanline until finished
    164  f0f4
    165  f0f4							; --------------------------------------------------------------------
    166  f0f4							; Display overscan
    167  f0f4							; --------------------------------------------------------------------
    168  f0f4		       a9 02		      lda	#2
    169  f0f6		       85 01		      sta	VBLANK	; Turn VBLANK on again
    170  f0f8					      repeat	30
    171  f0f8		       85 02		      sta	WSYNC
    170  f0f8					      repend
    171  f0fa		       85 02		      sta	WSYNC
    170  f0fa					      repend
    171  f0fc		       85 02		      sta	WSYNC
    170  f0fc					      repend
    171  f0fe		       85 02		      sta	WSYNC
    170  f0fe					      repend
    171  f100		       85 02		      sta	WSYNC
    170  f100					      repend
    171  f102		       85 02		      sta	WSYNC
    170  f102					      repend
    171  f104		       85 02		      sta	WSYNC
    170  f104					      repend
    171  f106		       85 02		      sta	WSYNC
    170  f106					      repend
    171  f108		       85 02		      sta	WSYNC
    170  f108					      repend
    171  f10a		       85 02		      sta	WSYNC
    170  f10a					      repend
    171  f10c		       85 02		      sta	WSYNC
    170  f10c					      repend
    171  f10e		       85 02		      sta	WSYNC
    170  f10e					      repend
    171  f110		       85 02		      sta	WSYNC
    170  f110					      repend
    171  f112		       85 02		      sta	WSYNC
    170  f112					      repend
    171  f114		       85 02		      sta	WSYNC
    170  f114					      repend
    171  f116		       85 02		      sta	WSYNC
    170  f116					      repend
    171  f118		       85 02		      sta	WSYNC
    170  f118					      repend
    171  f11a		       85 02		      sta	WSYNC
    170  f11a					      repend
    171  f11c		       85 02		      sta	WSYNC
    170  f11c					      repend
    171  f11e		       85 02		      sta	WSYNC
    170  f11e					      repend
    171  f120		       85 02		      sta	WSYNC
    170  f120					      repend
    171  f122		       85 02		      sta	WSYNC
    170  f122					      repend
    171  f124		       85 02		      sta	WSYNC
    170  f124					      repend
    171  f126		       85 02		      sta	WSYNC
    170  f126					      repend
    171  f128		       85 02		      sta	WSYNC
    170  f128					      repend
    171  f12a		       85 02		      sta	WSYNC
    170  f12a					      repend
    171  f12c		       85 02		      sta	WSYNC
    170  f12c					      repend
    171  f12e		       85 02		      sta	WSYNC
    170  f12e					      repend
    171  f130		       85 02		      sta	WSYNC
    170  f130					      repend
    171  f132		       85 02		      sta	WSYNC
    172  f134					      repend
    173  f134		       a9 00		      lda	#0
    174  f136		       85 01		      sta	VBLANK	; Turn VBLANK off
    175  f138
    176  f138							; --------------------------------------------------------------------
    177  f138							; Process joystick input for Player0
    178  f138							; --------------------------------------------------------------------
    179  f138				   CheckP0Up
    180  f138		       a9 10		      lda	#%00010000	; Player0 joystick up
    181  f13a		       2c 80 02 	      bit	SWCHA
    182  f13d		       d0 02		      bne	CheckP0Down	; If bit pattern does not match, by pass this block
    183  f13f		       e6 81		      inc	JetYPos
    184  f141
    185  f141				   CheckP0Down
    186  f141		       a9 20		      lda	#%00100000	; Player0 joystick down
    187  f143		       2c 80 02 	      bit	SWCHA
    188  f146		       d0 02		      bne	CheckP0Left	; If bit pattern does not match, by pass this block
    189  f148		       c6 81		      dec	JetYPos
    190  f14a
    191  f14a				   CheckP0Left
    192  f14a		       a9 40		      lda	#%01000000	; Player0 joystick left
    193  f14c		       2c 80 02 	      bit	SWCHA
    194  f14f		       d0 02		      bne	CheckP0Right	; If bit pattern does not match, by pass this block
    195  f151		       c6 80		      dec	JetXPos
    196  f153
    197  f153				   CheckP0Right
    198  f153		       a9 80		      lda	#%10000000	; Player0 joystick right
    199  f155		       2c 80 02 	      bit	SWCHA
    200  f158		       d0 02		      bne	EndInputCheck	; If bit pattern does not match, by pass this block
    201  f15a		       e6 80		      inc	JetXPos
    202  f15c
    203  f15c				   EndInputCheck		; Fallback when no input was performed
    204  f15c
    205  f15c							; --------------------------------------------------------------------
    206  f15c							; Loop back to start a brand new frame
    207  f15c							; --------------------------------------------------------------------
    208  f15c		       4c 3b f0 	      jmp	StartFrame	; Continue to display the next frame
    209  f15f
    210  f15f							; --------------------------------------------------------------------
    211  f15f							; Subroutine to handle object horizontal position with fine offset
    212  f15f							; --------------------------------------------------------------------
    213  f15f							; A is the target x-coordinate position in pixels of our object
    214  f15f							; Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    215  f15f							; --------------------------------------------------------------------
    216  f15f				   SetObjectXPos subroutine
    217  f15f		       85 02		      sta	WSYNC	; Start a fresh new scanline
    218  f161		       38		      sec		; Make sure carry-flag is set before subtracion
    219  f162				   .Div15Loop
    220  f162		       e9 0f		      sbc	#15	; Subtract 15 from accumulator
    221  f164		       b0 fc		      bcs	.Div15Loop	; Loop until carry-flag is clear
    222  f166		       49 07		      eor	#7	; Handle offset range from -8 to 7
    223  f168		       0a		      asl
    224  f169		       0a		      asl
    225  f16a		       0a		      asl
    226  f16b		       0a		      asl		; Four shift lefts to get only the top 4 bits
    227  f16c		       99 20 00 	      sta	HMP0,Y	; Store the fine offset to the correct HMxx
    228  f16f		       99 10 00 	      sta	RESP0,Y	; Fix object position in 15-step increment
    229  f172		       60		      rts
    230  f173
    231  f173							; --------------------------------------------------------------------
    232  f173							; Declare ROM lookup tables
    233  f173							; --------------------------------------------------------------------
    234  f173				   JetSprite
    235  f173		       00		      .byte.b	#%00000000	;
    236  f174		       14		      .byte.b	#%00010100	;   # #
    237  f175		       7f		      .byte.b	#%01111111	; #######
    238  f176		       3e		      .byte.b	#%00111110	;  #####
    239  f177		       1c		      .byte.b	#%00011100	;   ###
    240  f178		       1c		      .byte.b	#%00011100	;   ###
    241  f179		       08		      .byte.b	#%00001000	;    #
    242  f17a		       08		      .byte.b	#%00001000	;    #
    243  f17b		       08		      .byte.b	#%00001000	;    #
    244  f17c
    245  f17c				   JetSpriteTurn
    246  f17c		       00		      .byte.b	#%00000000	;
    247  f17d		       08		      .byte.b	#%00001000	;    #
    248  f17e		       3e		      .byte.b	#%00111110	;  #####
    249  f17f		       1c		      .byte.b	#%00011100	;   ###
    250  f180		       1c		      .byte.b	#%00011100	;   ###
    251  f181		       1c		      .byte.b	#%00011100	;   ###
    252  f182		       08		      .byte.b	#%00001000	;    #
    253  f183		       08		      .byte.b	#%00001000	;    #
    254  f184		       08		      .byte.b	#%00001000	;    #
    255  f185
    256  f185				   BomberSprite
    257  f185		       00		      .byte.b	#%00000000	;
    258  f186		       08		      .byte.b	#%00001000	;    #
    259  f187		       08		      .byte.b	#%00001000	;    #
    260  f188		       2a		      .byte.b	#%00101010	;  # # #
    261  f189		       3e		      .byte.b	#%00111110	;  #####
    262  f18a		       7f		      .byte.b	#%01111111	; #######
    263  f18b		       2a		      .byte.b	#%00101010	;  # # #
    264  f18c		       08		      .byte.b	#%00001000	;    #
    265  f18d		       1c		      .byte.b	#%00011100	;   ###
    266  f18e
    267  f18e				   JetColor
    268  f18e		       00		      .byte.b	#$00
    269  f18f		       fe		      .byte.b	#$FE
    270  f190		       0c		      .byte.b	#$0C
    271  f191		       0e		      .byte.b	#$0E
    272  f192		       0e		      .byte.b	#$0E
    273  f193		       04		      .byte.b	#$04
    274  f194		       ba		      .byte.b	#$BA
    275  f195		       0e		      .byte.b	#$0E
    276  f196		       08		      .byte.b	#$08
    277  f197
    278  f197				   JetColorTurn
    279  f197		       00		      .byte.b	#$00
    280  f198		       fe		      .byte.b	#$FE
    281  f199		       0c		      .byte.b	#$0C
    282  f19a		       0e		      .byte.b	#$0E
    283  f19b		       0e		      .byte.b	#$0E
    284  f19c		       04		      .byte.b	#$04
    285  f19d		       0e		      .byte.b	#$0E
    286  f19e		       0e		      .byte.b	#$0E
    287  f19f		       08		      .byte.b	#$08
    288  f1a0
    289  f1a0				   BomberColor
    290  f1a0		       00		      .byte.b	#$00
    291  f1a1		       32		      .byte.b	#$32
    292  f1a2		       32		      .byte.b	#$32
    293  f1a3		       0e		      .byte.b	#$0E
    294  f1a4		       40		      .byte.b	#$40
    295  f1a5		       40		      .byte.b	#$40
    296  f1a6		       40		      .byte.b	#$40
    297  f1a7		       40		      .byte.b	#$40
    298  f1a8		       40		      .byte.b	#$40
    299  f1a9
    300  f1a9							; --------------------------------------------------------------------
    301  f1a9							; Complete ROM size with exactly 4KB
    302  f1a9							; --------------------------------------------------------------------
    303  fffc					      org	$FFFC	; Move to position $FFFC
    304  fffc		       00 f0		      .word.w	Reset	; Write 2 bytes with the program reset address
    305  fffe		       00 f0		      .word.w	Reset	; Write 2 bytes with the interruption vector
